/**
 * {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p} =
 *       {in,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} if sel==0000
 *       {0,in,0,0,0,0,0,0,0,0,0,0,0,0,0,0} if sel==0001
 *       {0,0,in,0,0,0,0,0,0,0,0,0,0,0,0,0} if sel==0010
 *       {0,0,0,in,0,0,0,0,0,0,0,0,0,0,0,0} if sel==0011
 *       {0,0,0,0,in,0,0,0,0,0,0,0,0,0,0,0} if sel==0100
 *       {0,0,0,0,0,in,0,0,0,0,0,0,0,0,0,0} if sel==0101
 *       {0,0,0,0,0,0,in,0,0,0,0,0,0,0,0,0} if sel==0110
 *       {0,0,0,0,0,0,0,in,0,0,0,0,0,0,0,0} if sel==0111
 *       {0,0,0,0,0,0,0,0,in,0,0,0,0,0,0,0} if sel==1000
 *       {0,0,0,0,0,0,0,0,0,in,0,0,0,0,0,0} if sel==1001
 *       {0,0,0,0,0,0,0,0,0,0,in,0,0,0,0,0} if sel==1010
 *       {0,0,0,0,0,0,0,0,0,0,0,in,0,0,0,0} if sel==1011
 *       {0,0,0,0,0,0,0,0,0,0,0,0,in,0,0,0} if sel==1100
 *       {0,0,0,0,0,0,0,0,0,0,0,0,0,in,0,0} if sel==1101
 *       {0,0,0,0,0,0,0,0,0,0,0,0,0,0,in,0} if sel==1110
 *       {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,in} if sel==1111
 */
CHIP DMux16Way {
    IN in, sel[4];
    OUT a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;

    PARTS:
        DMux(in=in, sel=sel[3], a=DmuxOut0, b=DmuxOut1);
        DMux8Way(in=DmuxOut0, sel[0]=sel[0], sel[1]=sel[1], sel[2]=sel[2], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
        DMux8Way(in=DmuxOut1, sel[0]=sel[0], sel[1]=sel[1], sel[2]=sel[2], a=i, b=j, c=k, d=l, e=m, f=n, g=o, h=p);
}