// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:

        //Instruction decoder
        And(a=true, b=instruction[15], out=OutMainAnd);
        And(a=instruction[12], b=OutMainAnd, out=OutA);//A

        //Registrer for ALU BUS2
        Not(in=instruction[15], out=notInstruction);
        Mux16(a=outM2, b=instruction, sel=notInstruction, out=outMux1);

        //for registrer A
        Or(a=notInstruction,b=instruction[5],out=OutRegistrerA);
	    Register(in=outMux1,load=OutRegistrerA,out=RegistrerAout,out[0..14]=addressM);
        //ARegister(in=outMux1,load=OutRegistrerA,out=RegistrerAout,out[0..14]=addressM);

        //for registrer D
        And(a=instruction[15],b=instruction[4],out=OutRegistrerD);
	    DRegister(in=outM2,load=OutRegistrerD,out=RegistrerDout);

        //mux for BUS2 ALU
        Mux16(a=RegistrerAout, b=inM, sel=OutA, out=outMUX4ALU);
        
        ALU(x=RegistrerDout, y=outMUX4ALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outM2, zr=ZR, ng=NG);
        
        Or(a=NG, b=ZR, out=OutOr);
        Not(in=OutOr, out=OutNOT);
        And(a=true, b=instruction[15], out=outANDMAIN);
        And(a=outANDMAIN, b=instruction[2], out=OutANDP1);
        And(a=outANDMAIN, b=instruction[1], out=OutANDP2);
        And(a=outANDMAIN, b=instruction[0], out=OutANDP3);

        And(a=NG, b=OutANDP1, out=OutAndPC1);
        And(a=ZR, b=OutANDP2, out=OutAndPC2);
        And(a=OutNOT, b=OutANDP3, out=OutAndPC3);

        Or(a=OutAndPC1, b=OutAndPC2, out=OutORPC);
        Or(a=OutORPC, b=OutAndPC3, out=OutORPCF);

        PC(in=RegistrerAout, load=OutORPCF, inc=true, reset=reset, out[0..14]=pc);

        //write memory
        And(a=true, b=instruction[15], out=OutMemoAnd);
        And(a=OutMemoAnd, b=instruction[3], out=writeM);
}